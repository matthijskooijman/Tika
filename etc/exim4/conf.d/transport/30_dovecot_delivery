dovecot_deliver:
  driver = pipe

  # Copy any existing spam headers, since spamassassin replaces them instead of
  # adding to them. This helps to debug spamchecking on upstream mailservers.
  # This use an if to prevent adding the new header when no existing header is
  # present.
  headers_add = X-Original-Spam-Status: ${if !eq{$rheader_x-spam-status:}{}{$rheader_x-spam-status:}fail}
  headers_add = X-Original-Spam-Checker-Version: ${if !eq{$rheader_x-spam-checker-version:}{}{$rheader_x-spam-checker-version:}fail}
  headers_add = X-Original-Spam-Level: ${if !eq{$rheader_x-spam-level:}{}{$rheader_x-spam-level:}fail}
  headers_add = X-Original-Spam-Report: ${if !eq{$rheader_x-spam-report:}{}{$rheader_x-spam-report:}fail}

  # Let spamassassin scan the message, using the userpreferences of the user
  # the message will be delivered to. Also, don't scan any messages > 1000K.
  transport_filter = /usr/bin/spamc -s 1024000 -u "${extract{mail}{$address_data}}" --socket=/var/run/spamd.socket

  # Tell deliver about the sender and recipient addresses. Deliver will look
  # up the mailbox location itself. Note that we always use the primary mail
  # address from the 'mail' attribute here, since deliver only knows about
  # those.
  command = /usr/lib/dovecot/deliver -e -f "$sender_address" -d "${extract{uniqueIdentifier}{$address_data}}"

  # Run under the virtual-mail user/group
  user = virtual-mail
  # Initialize supplementary groups (spamd-access in this case)
  initgroups = true

  # Log (the first line of) any output generated
  log_output

  # Add some headers
  delivery_date_add
  envelope_to_add
  return_path_add

# vim: set sts=2 expandtab sw=2 ai:
