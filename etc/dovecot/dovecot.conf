## Dovecot configuration file

# If you're in a hurry, see http://wiki2.dovecot.org/QuickConfiguration

# "doveconf -n" command gives a clean output of the changed settings. Use it
# instead of copy&pasting files when posting to the Dovecot mailing list.

# '#' character and everything after it is treated as comments. Extra spaces
# and tabs are ignored. If you want to use either of these explicitly, put the
# value inside quotes, eg.: key = "# char and trailing whitespace  "


# We serve IMAPS, managesieve and use the deliver Local Delivery Agent
protocols = imap sieve

# Disable LOGIN command and all other plaintext authentications unless
# SSL/TLS is used (LOGINDISABLED capability). Note that if the remote IP
# matches the local IP (ie. you're connecting from the same computer), the
# connection is considered secure and plaintext authentication is allowed.
disable_plaintext_auth = yes

##
## Logging
##

# Dovecot logs to syslog by default, using the mail facility.

# Prefix for each line written to log file. % codes are in strftime(3)
# format.
log_timestamp = "%Y-%m-%d %H:%M:%S "

# Enable debugging here
#auth_verbose = yes
#mail_debug = yes
#auth_debug = yes
#verbose_ssl = yes

##
## SSL settings
##

# PEM encoded X.509 SSL/TLS certificate and private key. They're opened before
# dropping root privileges, so keep the key file unreadable by anyone but
# root. The public key should include the (chain to the) root CA.
ssl_cert = </etc/letsencrypt/live/tikatika.nl/fullchain.pem
ssl_key = </etc/letsencrypt/live/tikatika.nl/privkey.pem

##
## Mailbox locations and namespaces
##

# Store mails in the Folders directory inside the user's "home" directory.
# Note that there is no real system user and there is no real homedir, it's
# just the directory that stores all the files for this mailbox.
mail_location = Maildir:~/Folders:INBOX=~/INBOX:LAYOUT=fs

# Deliver and access mails using a single system user, that is specifically
# used only for this purpose.
mail_uid = virtual-mail
mail_gid = virtual-mail

# Make sure also have the spamd-access additional group (dovecot does not load
# additional groups from /etc/group, so we need to specify it here explicitly).
# This group is used to access the spamd UNIX socket to train messages in the
# antispam plugin.
mail_access_groups = spamd-access

##
## IMAP specific settings
##

protocol imap {
  # Enable antispam (which automatically lets spamassassin train its Bayesian
  # filter when mail is moved into or out of a spamfolder).
  mail_plugins = antispam
 
  # Use this to log full IMAP conversations. See
  # http://wiki.dovecot.org/Debugging/Rawlog for additional setup needed.
  #mail_executable = /usr/lib/dovecot/rawlog /usr/lib/dovecot/imap
}

##
## LDA specific settings
##

protocol lda {
  # deliver wants a postmaster address to send bounces, but we've configured
  # Exim to only call deliver with -e, meaning exim will send the bounces.
  # Setting this to "" silences deliver.
  postmaster_address = ""

  # Enable sieve filters on delivery.
  mail_plugins = sieve

  # Autocreate and subscribe folders if they're not there yet
  lda_mailbox_autocreate = yes
  lda_mailbox_autosubscribe = yes
}

# LDAP binding only supports plain (which is safe when combined with SSL)
auth_mechanisms = plain login

# Authenticate against LDAP
passdb {
  args = /etc/dovecot/dovecot-ldap.conf
  driver = ldap
}

# Get user info from LDAP
userdb {
  driver = static
  args = home=/data/mail/%u allow_all_users=yes uid=virtual-mail gid=virtual-mail
  # allow_all_users means to not verify the username (== unique ID) in the
  # passdb, that won't work for some reason. Just trust that the user is
  # actually valid (which it is - exim will check it before calling deliver and
  # the passdb will check it at login time). See
  # http://www.dovecot.org/list/dovecot/2008-March/029503.html
  #
  # uid and gid are repeated here, even though they are documented to override
  # mail_uid and mail_gid above, to work around the error message "client
  # doesn't have lookup permissions for this user: userdb reply doesn't contain
  # uid (change userdb socket permissions)" which happens during userdb
  # lookups.
}

service auth {
  # Run auth process as nobody (since we don't access shadow, we don't need
  # root here).
  user = nobody

  # Master socket provides access to userdb information. It's typically
  # used to give Dovecot's local delivery agent access to userdb so it
  # can find mailbox locations. Socket lives in /var/run/dovecot
  unix_listener auth-master {
    # Enable access for dovecot-deliver
    mode = 0600
    user = virtual-mail
    group = virtual-mail
  }

  # The client socket is generally safe to export to everyone. Typical use
  # is to export it to your SMTP server so it can do SMTP AUTH lookups
  # using it. Socket lives in /var/run/dovecot
  unix_listener auth-client {
    # Only exim needs to use this socket, so limit access anyway.
    mode = 0600
    user = Debian-exim
    group = Debian-exim
  }
}

##
## Plugin settings
##

plugin {
  #############################################################################
  # Sieve plugin (http://wiki.dovecot.org/LDA/Sieve) and ManageSieve service
  #############################################################################
  
  # Location of the active script. When ManageSieve is used this is actually 
  # a symlink pointing to the active script in the sieve storage directory. 
  sieve=~/sieve

  # The path to the directory where the personal Sieve scripts are stored. For 
  # ManageSieve this is where the uploaded scripts are stored.
  sieve_dir=~/sieve.d

  # If the user has no personal active script (i.e. if the file
  # indicated in sieve= does not exist), use this one:
  sieve_global_path = /etc/dovecot/sieve/default

  #############################################################################
  # Antispam plugin
  #############################################################################
  
  # Trash mailboxes. When moving mails into or out of these, don't do any
  # training (so mail won't get trained as ham when users move them to thrash
  # from their spam mailbox, or as ham when they move them from the inbox to
  # these).
  antispam_trash_pattern_ignorecase = trash;Deleted *;Prullenbak;Verwijderde *

  # Spam mailboxes. When manually moving mails into or out of these (through
  # IMAP), they are trained as spam or ham respectively.
  antispam_spam = Spam;ProbablySpam;Ongewenste e-mail;Junk

  # Anything in the INBOX is treated as unsure, so that it will be trained as
  # ham or spam depending on where it is copied to. This makes sure that pretty
  # much all e-mail gets trained.
  # Disabled, bugged
  #antispam_unsure = INBOX

  # Use spamc to tell spamd to train messages. We use this approach instead of
  # calling sa-learn, since now only spamd needs write access to the bayes
  # database, which simplifies things.
  antispam_backend = pipe
  antispam_pipe_program = /usr/local/bin/trainspam
  antispam_pipe_program_spam_arg = spam
  antispam_pipe_program_notspam_arg = ham

  # Enable debugging here (outputs to debug.log)
  #antispam_debug_target = syslog
  #antispam_verbose_debug = 1
}

# vim: set sts=2 sw=2 expandtab autoindent:
